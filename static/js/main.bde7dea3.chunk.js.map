{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/helpers.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","todoInfoClasses","classNames","completed","title","TodoList","todos","map","getUser","userId","foundUser","usersFromServer","find","Error","getTodos","App","useState","setTitle","setTodos","selectedUserID","setSelectedUserID","titleError","setTitleError","userError","setUserError","isTitleExist","trim","action","method","onSubmit","event","preventDefault","newId","todoIds","Math","max","getNewId","newTodo","Number","prevTodos","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bde7dea3.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { UserType } from '../../types/UserType';\n\ntype UserInfoProps = {\n  user?: UserType | null;\n};\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n    {user?.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { TodoType } from '../../types/TodoType';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoInfoType = {\n  todo: TodoType;\n};\n\nexport const TodoInfo: React.FC<TodoInfoType> = ({ todo }) => {\n  const todoInfoClasses = classNames('TodoInfo', {\n    'TodoInfo--completed': todo.completed,\n  });\n\n  return (\n    <article className={todoInfoClasses}>\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { TodoType } from '../../types/TodoType';\nimport { TodoInfo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: TodoType[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import { UserType } from '../types/UserType';\nimport usersFromServer from '../api/users';\nimport { TodoType } from '../types/TodoType';\n\nexport const getUser = (userId: number): UserType => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  if (!foundUser) {\n    throw new Error('User was not found');\n  }\n\n  return foundUser;\n};\n\nexport function getNewId(todos: TodoType[]) {\n  const todoIds = todos.map((todo) => todo.id);\n\n  return Math.max(...todoIds) + 1;\n}\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoType } from './types/TodoType';\nimport { TodoList } from './components/TodoList';\nimport { getNewId, getUser } from './components/helpers';\n\nconst getTodos: TodoType[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [todos, setTodos] = useState(getTodos);\n  const [selectedUserID, setSelectedUserID] = useState(0);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const isTitleExist = !selectedUserID || !title.trim();\n\n  const formOnSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setTitleError(true);\n    }\n\n    if (!selectedUserID) {\n      setUserError(true);\n    }\n\n    if (isTitleExist) {\n      return;\n    }\n\n    const newId = getNewId(todos);\n\n    const newTodo: TodoType = {\n      id: newId,\n      completed: false,\n      user: getUser(Number(selectedUserID)),\n      title: title.trim(),\n      userId: selectedUserID,\n    };\n\n    setTodos((prevTodos) => [...prevTodos, newTodo]);\n\n    setTitle('');\n    setSelectedUserID(0);\n  };\n\n  const handleChangeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserID(+event.target.value);\n    setUserError(false);\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setTitleError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={formOnSubmit}>\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={handleChangeTitle}\n          />\n          {titleError && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserID}\n            onChange={handleChangeUser}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (user\n              && (<option value={user.id} key={user.id}>{user.name}</option>)\n            ))}\n\n          </select>\n          {userError && (<span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}